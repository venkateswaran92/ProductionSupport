spring:
  application:
    name: ragExample # The name of your Spring Boot application
   # initialize-schema: true # Automatically initializes the database schema on startup
  ai:
    chat:
      client:
        enabled: true # Enables the AI chat client integration

    openai:
      api-key: # Provide your OpenAI API key here
      model: gpt-4 # The OpenAI model to use for generating responses
      temperature: 0.7 # Controls randomness (0 = deterministic, 1 = creative)
      max-tokens: 2000 # Maximum number of tokens (words/pieces) to generate in a response

    ollama:
      enabled: false # Disable Ollama (local LLM) if you're using OpenAI instead

  datasource:
    url: jdbc:postgresql://localhost:5432/ragExample # JDBC connection string to PostgreSQL
    username: postgres # Database username
    password: postgres # Database password

  vectorstore:
    pgvector:
      index-type: HNSW # Indexing method used by pgvector (HNSW = fast, approximate nearest neighbors)
      distance-type: COSINE_DISTANCE # Distance function used to compare vectors (Cosine is common for embeddings)
      dimension: 1536 # Dimensionality of the vector embeddings (e.g., OpenAI embedding output size)
      # max-document-batch-size: 10000 # Optional: Batch size for loading documents into vector store

  docker:
    compose:
      lifecycle-management: start_only # Only start Docker Compose when the app starts, donâ€™t stop it on shutdown
